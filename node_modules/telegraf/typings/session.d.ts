import { Context } from './context';
import { MaybePromise } from './composer';
import { MiddlewareFn } from './middleware';
export interface SessionStore<T> {
    get: (name: string) => MaybePromise<T | undefined>;
    set: (name: string, value: T) => MaybePromise<void>;
    delete: (name: string) => MaybePromise<void>;
}
interface SessionOptions<S extends object> {
    getSessionKey?: (ctx: Context) => Promise<string | undefined>;
    store?: SessionStore<S>;
}
export interface SessionContext<S extends object> extends Context {
    session?: S;
}
export declare function session<S extends object>(options?: SessionOptions<S>): MiddlewareFn<SessionContext<S>>;
export declare class MemorySessionStore<T> implements SessionStore<T> {
    private readonly ttl;
    private readonly store;
    constructor(ttl?: number);
    get(name: string): T | undefined;
    set(name: string, value: T): void;
    delete(name: string): void;
}
export declare function isSessionContext<S extends object>(ctx: Context): ctx is SessionContext<S>;
export {};
//# sourceMappingURL=session.d.ts.map