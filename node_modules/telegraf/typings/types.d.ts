/** @format */
import Context from './context';
export declare namespace Middleware {
    type Fn<TContext extends Context> = (ctx: TContext, next: () => Promise<void>) => Promise<unknown> | void;
    interface Obj<TContext extends Context> {
        middleware: () => Fn<TContext>;
    }
    type ExtFn<BaseContext extends Context, Extension extends object> = <TContext extends BaseContext>(ctx: TContext, next: (ctx: Extension & TContext) => Promise<void>) => Promise<unknown> | void;
    type Ext<BaseContext extends Context, Extension extends object> = ExtFn<BaseContext, Extension>;
}
export declare type Middleware<TContext extends Context> = Middleware.Fn<TContext> | Middleware.Obj<TContext>;
export declare type NonemptyReadonlyArray<T> = readonly [T, ...T[]];
export declare type Tail<T> = T extends [unknown, ...infer U] ? U : never;
